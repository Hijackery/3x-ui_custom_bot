import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from config import Config
from database import Database
from xui_client import XUIClient, XUIError

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

class VPNBot:
    def __init__(self):
        self.db = Database()
        self.xui = XUIClient()
        self.app = Application.builder().token(Config.TOKEN).build()
        self._register_handlers()
        self.app.add_error_handler(self._error_handler)

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self._start),
            CommandHandler("help", self._show_help),
            CallbackQueryHandler(self._callback_handler),
            CommandHandler("stats", self._stats),
            CommandHandler("speedtest", self._speedtest),
            CommandHandler("backup", self._backup),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message)
        ]
        for handler in handlers:
            self.app.add_handler(handler)

    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling update: {context.error}", exc_info=context.error)
        
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(context.error, XUIError):
            error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(context.error)}"
        
        try:
            if update and hasattr(update, 'message'):
                await update.message.reply_text(error_text)
            elif update and hasattr(update, 'callback_query'):
                await update.callback_query.message.reply_text(error_text)
        except Exception as e:
            logger.error(f"Failed to send error message: {str(e)}")

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if not self.db.get_user(user.id):
            self.db.add_user({
                "id": user.id,
                "username": user.username,
                "full_name": user.full_name
            })
        
        welcome_text = (
            "üåü –ü—Ä–∏–≤–µ—Ç! üåü\n\n"
            "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
            "‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
            "üîπ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
            "üîπ –•—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "üîπ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
            "–ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        )
        
        await update.message.reply_text(welcome_text)
        await self._show_main_menu(update, is_admin=(user.id in Config.ADMIN_IDS))

    async def _show_main_menu(self, update: Update, is_admin: bool = False):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        buttons = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="create")],
            [InlineKeyboardButton("üóÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="list")],
            [InlineKeyboardButton("üì≤ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="help")],
            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")],
        ]
        
        if is_admin:
            buttons.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        if update.message:
            await update.message.reply_text("üîê VPN Manager", reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.message.reply_text("üîê VPN Manager", reply_markup=reply_markup)

    async def _show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        instructions = (
            "üì≤ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n\n"
            "<b>Windows:</b>\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É <a href='https://github.com/invisible-xray/invisible-man-xray/releases'>Invisible Man Xray</a>\n"
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç'\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ QR-–∫–æ–¥\n"
            "4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            
            "<b>macOS:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <a href='https://apps.apple.com/us/app/v2box-v2ray-client/id6446814690'>V2Box</a> –∏–∑ App Store\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '+'\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞' –∏–ª–∏ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'\n"
            "4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            
            "<b>iOS:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <a href='https://apps.apple.com/us/app/v2raytun/id6446814690'>V2RayTun</a> –∏–∑ App Store\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '+'\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞' –∏–ª–∏ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'\n"
            "4. –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n\n"
            
            "<b>Android:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <a href='https://play.google.com/store/apps/details?id=com.v2raytun.app'>V2RayTun</a> –∏–∑ Play Market\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '+'\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞' –∏–ª–∏ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'\n"
            "4. –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n\n"
            
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        
        await update.message.reply_text(
            instructions,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    async def _callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            await query.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        
        if query.data == "create":
            await self._create_config(query)
        elif query.data == "list":
            await self._list_configs(query)
        elif query.data == "help":
            await self._show_help_callback(query)
        elif query.data.startswith("delete_"):
            await self._confirm_delete(query, query.data[7:])
        elif query.data.startswith("confirm_"):
            await self._delete_config(query, query.data[8:])
        elif query.data.startswith("view_"):
            await self._show_config_details(query, query.data[5:])
        elif query.data == "donate":
            await self._show_donate_info(query)
        elif query.data == "admin":
            await self._show_admin_panel(query)
        elif query.data == "cancel":
            await self._show_main_menu(update, is_admin=(query.from_user.id in Config.ADMIN_IDS))

    async def _show_help_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ (–¥–ª—è callback)"""
        instructions = (
"üìö <b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ</b>\n\n"
            
            "üñ• <b>–î–ª—è Windows:</b>\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ <b>Invisible Man Xray</b> –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            "   <a href='https://github.com/invisible-xray/invisible-man-xray/releases'>–°–∫–∞—á–∞—Ç—å –¥–ª—è Windows</a>\n"
            "2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —É–¥–æ–±–Ω—É—é –ø–∞–ø–∫—É\n"
            "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª <code>invisible-man-xray.exe</code> (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å)\n"
            "4. –í –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'–ò–º–ø–æ—Ä—Ç'</b>\n"
            "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
            "6. –ù–∞–∂–º–∏—Ç–µ <b>'–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'</b>\n"
            "7. –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: –ü–ö–ú –ø–æ —è—Ä–ª—ã–∫—É ‚Üí –°–≤–æ–π—Å—Ç–≤–∞ ‚Üí –í –ø–æ–ª–µ '–û–±—ä–µ–∫—Ç' –¥–æ–±–∞–≤—å—Ç–µ <code>-autostart</code>\n\n"
            
            "üçé <b>–î–ª—è macOS:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>V2Box</b> –∏–∑ App Store:\n"
            "   <a href='https://apps.apple.com/us/app/v2box-v2ray-client/id6446814690'>–°–∫–∞—á–∞—Ç—å V2Box</a>\n"
            "2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3. –ù–∞–∂–º–∏—Ç–µ <b>'+'</b> –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ:\n"
            "   - <b>'–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'</b> (–µ—Å–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É)\n"
            "   - <b>'–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'</b> (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–º–µ—Ä—É)\n"
            "5. –ù–∞–∂–º–∏—Ç–µ <b>'–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'</b>\n"
            "6. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Network ‚Üí</b> —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
            
            "üì± <b>–î–ª—è iOS:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>V2RayTun</b> –∏–∑ App Store:\n"
            "   <a href='https://apps.apple.com/us/app/v2raytun/id6446814690'>–°–∫–∞—á–∞—Ç—å V2RayTun</a>\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ù–∞–∂–º–∏—Ç–µ <b>'+'</b>\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞:\n"
            "   - –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ <b>'Import from clipboard'</b>\n"
            "   - –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>'Scan QR Code'</b> –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "4. –ù–∞–∂–º–∏—Ç–µ <b>'Save'</b> –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "5. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ <b>VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é</b> –≤ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ\n\n"
            
            "ü§ñ <b>–î–ª—è Android:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>V2RayTun</b> –∏–∑ Play Market:\n"
            "   <a href='https://play.google.com/store/apps/details?id=com.v2raytun.app'>–°–∫–∞—á–∞—Ç—å V2RayTun</a>\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –¢–∞–ø–Ω–∏—Ç–µ <b>'+'</b> –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ:\n"
            "   - <b>'Import config from clipboard'</b> –¥–ª—è —Å—Å—ã–ª–∫–∏\n"
            "   - <b>'Scan QR code'</b> –¥–ª—è QR-–∫–æ–¥–∞\n"
            "4. –ù–∞–∂–º–∏—Ç–µ <b>'Save'</b> ‚Üí –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å\n"
            "5. –†–∞–∑—Ä–µ—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ\n\n"
            
            "üîß <b>–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:</b>\n"
            "- –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
            "- –û–±–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏\n"
            "- –î–ª—è Windows: –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å\n\n"
        )
        
        await query.message.reply_text(
            instructions,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
            ])
        )

    async def _create_config(self, query):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
        user_id = query.from_user.id
        current_count = self.db.count_user_configs(user_id)
        if current_count >= Config.MAX_CONFIGS_PER_USER:
            await query.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {Config.MAX_CONFIGS_PER_USER} –∫–æ–Ω—Ñ–∏–≥–æ–≤!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏", callback_data="list")]
                ])
            )
            return
        
        try:
            port = random.randint(*Config.PORT_RANGE)
            config = await self.xui.create_inbound(port)
            config_id = self.db.create_config(user_id, config)
            
            remaining = Config.MAX_CONFIGS_PER_USER - current_count - 1
            
            config_text = (
                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üîπ –ü–æ—Ä—Ç: <code>{port}</code>\n"
                f"üîπ ID: <code>{config['uuid']}</code>\n"
                f"üîπ –ò–º—è: <code>{config['email']}</code>\n"
                f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ñ–∏–≥–æ–≤: {remaining}\n\n"
                f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                f"<code>{config['data']}</code>\n\n"
                f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
                f"–ê–¥—Ä–µ—Å: <code>{Config.SERVER_IP}</code>\n"
                f"–ü–æ—Ä—Ç: <code>{port}</code>\n"
                f"ID: <code>{config['uuid']}</code>\n"
                f"–ö–ª—é—á: <code>{Config.PUBLIC_KEY}</code>\n"
                f"SNI: <code>{random.choice(Config.SERVER_NAMES)}</code>\n"
                f"Short ID: <code>{Config.SHORT_ID}</code>"
            )
            
            await query.message.reply_photo(
                photo=config['qr_code'],
                caption=config_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                ])
            )
        except XUIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                ])
            )

    async def _list_configs(self, query):
        """–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        configs = self.db.get_user_configs(query.from_user.id)
        if not configs:
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="create")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                ])
            )
            return
        
        buttons = []
        for config in configs:
            buttons.append([
                InlineKeyboardButton(f"üëÅ {config['email']}", callback_data=f"view_{config['id']}"),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config['id']}")
            ])
        
        buttons.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")])
        
        await query.message.reply_text(
            "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    async def _show_config_details(self, query, config_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —Å QR-–∫–æ–¥–æ–º"""
        config = self.db.conn.execute(
            "SELECT * FROM configs WHERE id = ? AND is_active = 1",
            (config_id,)
        ).fetchone()
        
        if not config:
            await query.message.reply_text(
                "–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üóÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="list")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                ])
            )
            return
        
        qr_code = self.xui._generate_qr_code(config['data'])
        
        config_text = (
            f"üîπ –ö–æ–Ω—Ñ–∏–≥: <code>{config['email']}</code>\n"
            f"üîπ –ü–æ—Ä—Ç: <code>{config['port']}</code>\n"
            f"üîπ ID: <code>{config['uuid']}</code>\n\n"
            f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
            f"<code>{config['data']}</code>\n\n"
            f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
            f"–ê–¥—Ä–µ—Å: <code>{Config.SERVER_IP}</code>\n"
            f"–ü–æ—Ä—Ç: <code>{config['port']}</code>\n"
            f"ID: <code>{config['uuid']}</code>\n"
            f"–ö–ª—é—á: <code>{Config.PUBLIC_KEY}</code>\n"
            f"SNI: <code>{random.choice(Config.SERVER_NAMES)}</code>\n"
            f"Short ID: <code>{Config.SHORT_ID}</code>"
        )
        
        await query.message.reply_photo(
            photo=qr_code,
            caption=config_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üóÇ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="list")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
            ])
        )

    async def _show_donate_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        donate_text = ()
        
        await query.message.reply_text(
            donate_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
            ])
        )

    async def _confirm_delete(self, query, config_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
        await query.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥?",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{config_id}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")
                ]
            ])
        )

    async def _delete_config(self, query, config_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞"""
        try:
            configs = self.db.get_user_configs(query.from_user.id)
            target_config = next((c for c in configs if c["id"] == config_id), None)
            
            if not target_config:
                await query.message.reply_text("–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            success = await self.xui.delete_inbound(target_config["inbound_id"])
            if success:
                self.db.delete_config(config_id)
                remaining = Config.MAX_CONFIGS_PER_USER - self.db.count_user_configs(query.from_user.id)
                
                await query.message.reply_text(
                    f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
                    f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ñ–∏–≥–æ–≤: {remaining}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                    ])
                )
            else:
                await query.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                    ])
                )
        except XUIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
            await query.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
                ])
            )

    async def _show_admin_panel(self, query):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        stats = self.db.get_detailed_stats()
        total_users = len(self.db.conn.execute("SELECT id FROM users").fetchall())
        active_configs = len(self.db.conn.execute(
            "SELECT id FROM configs WHERE is_active = 1"
        ).fetchall())
        
        await query.message.reply_text(
            f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {active_configs}\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n" + "\n".join(
                f"{row['date']}: {row['new_users']} –Ω–æ–≤—ã—Ö"
                for row in stats[:5]
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="full_stats")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")]
            ])
        )

    async def _stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        if update.effective_user.id not in Config.ADMIN_IDS:
            return
        
        stats = self.db.get_detailed_stats()
        response = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:\n–î–∞—Ç–∞ | –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]
        response.extend(f"{row['date']} | {row['new_users']}" for row in stats)
        
        await update.message.reply_text("\n".join(response))

    async def _speedtest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import speedtest
            st = speedtest.Speedtest()
            st.get_best_server()
            speed = st.download() / 1_000_000  # –ú–±–∏—Ç/—Å
            
            await update.message.reply_text(
                f"üì∂ –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {speed:.2f} –ú–±–∏—Ç/—Å\n"
                f"üè† –°–µ—Ä–≤–µ—Ä: {st.results.server['name']}"
            )
        except ImportError:
            await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å speedtest-cli –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if update.effective_user.id not in Config.ADMIN_IDS:
            return
        
        try:
            import shutil
            from datetime import datetime
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"vpnbot_backup_{timestamp}.db"
            
            shutil.copy2("vpnbot.db", backup_file)
            
            await update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")

    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.message.text.lower() == "—Ç–µ—Ö—Ä–∞–±–æ—Ç—ã" and update.effective_user.id in Config.ADMIN_IDS:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö:")
            context.user_data["awaiting_tech_work"] = True
        elif update.effective_user.id in Config.ADMIN_IDS and context.user_data.get("awaiting_tech_work"):
            await self.notify_tech_work(update.message.text)
            await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            context.user_data["awaiting_tech_work"] = False

    async def notify_tech_work(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö"""
        try:
            await self.app.bot.send_message(
                chat_id=Config.TECH_WORK_CHAT_ID,
                text=f"‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã:\n{message}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.app.run_polling()

if __name__ == "__main__":
    bot = VPNBot()
    bot.run()
